1)
select avg(sales_amount), customer_id, product_category, sales_date from Sales_Records
join products on Sales_Records.product_id = products.product_id
where month(sales_date) - 1
group by product_category;

2)
SELECT product_id, SUM(sales_amount) AS total_sales
FROM sales_records
WHERE YEAR(sales_date) = YEAR(CURRENT_DATE)
GROUP BY product_id
ORDER BY total_sales DESC
LIMIT 3;

3)
SELECT 
    customer_id,
    SUM(sales_amount) AS total_sales,
    (SUM(sales_amount) / (SELECT SUM(sales_amount) FROM sales_records)) * 100 AS sales_contribution_percentage
FROM 
    sales_records
GROUP BY 
    customer_id
ORDER BY 
    sales_contribution_percentage DESC;

4)
    WITH MonthlyPurchase AS (
    SELECT
        customer_id,
        DATE_FORMAT(sales_date, '%Y-%m') AS month,
        COUNT(DISTINCT DATE_FORMAT(sales_date, '%Y-%m-%d')) AS purchase_count
    FROM
        sales_records
    WHERE
    sales_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)
    GROUP BY
        customer_id,
        DATE_FORMAT(sales_date, '%Y-%m')
),
Classification AS (
    SELECT
        customer_id,
        SUM(CASE WHEN purchase_count >= 4 THEN 1 ELSE 0 END) AS consistent_months,
        COUNT(DISTINCT month) AS total_months
    FROM
        MonthlyPurchase
    GROUP BY
      customer_id
)
SELECT
    customer_id,
    CASE
        WHEN consistent_months >= 4 THEN 'Consistent Buyer'
        ELSE 'Occasional Buyer'
    END AS buyer_classification
FROM
    Classification;

5)
SELECT 
    f.departure_airport AS departure_airport,
    f.arrival_airport AS arrival_airport,
    AVG(t.ticket_price) AS average_ticket_price
FROM 
    flights f
JOIN 
    tickets t ON f.flight_id = t.flight_id
GROUP BY 
    f.departure_airport, f.arrival_airport;

6) 
SELECT 
    f.flight_number,
    f.departure_date,
    COUNT(t.ticket_id) AS total_tickets_sold
FROM 
    flights f
LEFT JOIN 
    tickets t ON f.flight_id = t.flight_id
GROUP BY 
    f.flight_id, f.flight_number, f.departure_date
ORDER BY 
    total_tickets_sold DESC;

7)
SELECT 
    p.passenger_name,
    SUM(t.ticket_price) AS total_amount_spent,
    CASE 
        WHEN SUM(t.ticket_price) >= 1000 THEN 'Frequent Flyer'
        ELSE 'Regular Flyer'
    END AS frequent_flyer_status
FROM 
    passengers p
JOIN 
    tickets t ON p.passenger_id = t.passenger_id
GROUP BY 
    p.passenger_id, p.passenger_name
ORDER BY 
    total_amount_spent DESC
LIMIT 5;

8)
SELECT 
    DATE_FORMAT(f.departure_date, '%Y-%m') AS month,
    COUNT(t.ticket_id) AS total_tickets_sold
FROM 
    flights f
JOIN 
    tickets t ON f.flight_id = t.flight_id
GROUP BY 
    DATE_FORMAT(f.departure_date, '%Y-%m')
ORDER BY 
    total_tickets_sold DESC
LIMIT 1;

9)
SELECT 
    p.player_id,
    g.game_genre
FROM 
    players p
JOIN 
    playerscores ps ON p.player_id = ps.player_id
JOIN 
    games g ON ps.game_id = g.game_id
GROUP BY 
    p.player_id, g.game_genre;

10)
SELECT 
    g.game_name,
    COUNT(DISTINCT ps.player_id) AS total_players
FROM 
    games g
JOIN 
    playerscores ps ON g.game_id = ps.game_id
GROUP BY 
    g.game_id, g.game_name
ORDER BY 
    total_players DESC
LIMIT 3;

11)
SELECT 
    g.game_name,
    AVG(ps.score) AS avg_score,
    MAX(ps.score) AS highest_score,
    COUNT(DISTINCT ps.player_id) AS total_players
FROM 
    games g
JOIN 
    playerscores ps ON g.game_id = ps.game_id
GROUP BY 
    g.game_id, g.game_name;

12) 
   SELECT 
    p.player_id,
    p.registration_date,
    MAX(ps.play_date) AS last_activity_date
FROM 
    players p
LEFT JOIN 
    playerscores ps ON p.player_id = ps.player_id
WHERE 
    ps.play_date <= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY)
    OR ps.play_date IS NULL
GROUP BY 
    p.player_id, p.registration_date
HAVING 
    MAX(ps.play_date) < DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY)
ORDER BY 
    p.registration_date;

13)
SELECT 
    d.doctor_id,
    d.doctor_name,
    SUM(t.cost) AS total_treatment_cost
FROM 
    doctors d
JOIN 
    treatments t ON d.doctor_id = t.doctor_id
GROUP BY 
    d.doctor_id, d.doctor_name
ORDER BY 
    total_treatment_cost DESC;

14)
   SELECT 
    t.treatment_name,
    SUM(t.cost) AS total_revenue,
    (SUM(t.cost) / (SELECT SUM(cost) FROM treatments)) * 100 AS revenue_contribution_percentage
FROM 
    treatments t
GROUP BY 
    t.treatment_name; 

15)
    SELECT 
    p1.patient_id,
    p1.patient_name,
    p1.admission_date AS first_admission_date,
    p1.discharge_date AS first_discharge_date,
    p2.admission_date AS readmission_date,
    p2.discharge_date AS readmission_discharge_date
FROM 
    patients p1
JOIN 
    patients p2 ON p1.patient_id = p2.patient_id
WHERE 
    p2.admission_date > DATE_ADD(p1.discharge_date, INTERVAL 30 DAY);


16)
SELECT 
    gender,
    diagnosis,
    ROUND(AVG(DATEDIFF(discharge_date, admission_date))) AS avg_length_of_stay
FROM 
    patients
GROUP BY 
    gender, diagnosis;

17)
SELECT 
    c.department,
    e.semester,
    AVG(e.grade) AS average_grade
FROM 
    enrollments e
JOIN 
    students s ON e.student_id = s.student_id
JOIN 
    courses c ON e.course_id = c.course_id
GROUP BY 
    c.department, e.semester;

18)
 SELECT 
    s.major,
    YEAR(e.enrollment_year) AS enrollment_year,
    COUNT(*) AS total_students_enrolled
FROM 
    students s
JOIN 
    enrollments e ON s.student_id = e.student_id
GROUP BY 
    s.major, enrollment_year
ORDER BY 
    total_students_enrolled DESC;

19)
 SELECT e.student_id, s.student_name, e.semester,
    SUM(c.credits) AS total_credits_earned
FROM 
    enrollments e
JOIN 
    students s ON e.student_id = s.student_id
JOIN 
    courses c ON e.course_id = c.course_id
GROUP BY 
    e.student_id, e.semester
HAVING 
    SUM(c.credits) >= 50;

20)

SELECT 
    course_name,
    enrollment_year,
    total_students_enrolled
FROM (
    SELECT c.course_name, YEAR(e.enrollment_year) AS enrollment_year,
        COUNT(DISTINCT e.student_id) AS total_students_enrolled,
        ROW_NUMBER() OVER (PARTITION BY YEAR(e.enrollment_year) 
        ORDER BY COUNT(DISTINCT e.student_id) DESC) AS enrollment_rank
    FROM 
        courses c
    JOIN 
        enrollments e ON c.course_id = e.course_id
    GROUP BY 
        c.course_name, enrollment_year
) ranked_courses
WHERE 
    enrollment_rank <= 3
ORDER BY 
    enrollment_year, total_students_enrolled DESC;










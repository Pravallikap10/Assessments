# -*- coding: utf-8 -*-
"""4370logisticregression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C4Lo_SmgKnJlPhB-qdsq5aDuQFBYYUcf
"""

import pandas as pd
import numpy as np
from sklearn import metrics
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score,classification_report, confusion_matrix, roc_curve, auc
from sklearn.model_selection import train_test_split
import seaborn as sns
from sklearn.preprocessing import OneHotEncoder, LabelEncoder

df = pd.read_csv("/content/booking.csv")
df.head()

df.repeated = pd.to_numeric(df.repeated,errors='coerce')
df.info()

df.head()

df.info()

df.describe(include='all')

df.isnull().sum()

df.duplicated().sum()

df = df.drop_duplicates()

num_df = df.select_dtypes(include=np.number)
df2=df.iloc[:, 1:]

print(df2)

df2['booking status'].replace(to_replace = 'Not_Canceled', value=1, inplace=True)
df2['booking status'].replace(to_replace = 'Canceled' , value=0, inplace= True)

df_dummies=pd.get_dummies(df2)
print(df_dummies.head())

df2.select_dtypes(include=np.number).corr()['booking status']
df_co=df_dummies.corr()['booking status']
df_co.plot(kind = 'bar')

df_booking = df_dummies['booking status']
df_booking
df_booking.dropna(axis =0, inplace=True)
df_dummies.dropna(axis =0, inplace=True)
df_dummies2=df_dummies.copy()

from sklearn.preprocessing import MinMaxScaler
features = df_dummies2.columns.values
scaler = MinMaxScaler(feature_range = (0,1))
scaler.fit(df_dummies2)
X=pd.DataFrame(scaler.transform(df_dummies2))
X.columns = features
X

num_df.dropna(axis= 0, inplace=True)
num_df

df_booking.dropna(axis = 1 , inplace = True )
#

X_train, X_test, y_train, y_test = train_test_split(num_df,df_booking,train_size=0.5,random_state=10)
#
print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

model = LogisticRegression()
#
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print(y_pred)

#
cnf_matrix = metrics.confusion_matrix(y_test, y_pred)
cnf_matrix

from sklearn.metrics import classification_report

print(classification_report(y_test, y_pred))

from sklearn.metrics import accuracy_score
print(accuracy_score(y_test, y_pred))


# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hXB9LQEmJcnsUmKYlBRuj-9XbSJ7KNKW
"""

#1
def calculate_area_category(length, width):
    area = length * width
    if area < 100:
        category = 'small'
    elif area < 200:
        category = 'medium'
    else:
        category = 'large'
    return area, category
length = float(input("Enter the length of the property in meters: "))
width = float(input("Enter the width of the property in meters: "))
area, category = calculate_area_category(length, width)

print(f"The area of the property is {area:.2f} square meters, and it is categorized as a {category} property.")

#2
def calculate_bmi(weight_kg, height_m):
    bmi = weight_kg / (height_m ** 2)
    return bmi

def get_health_condition(bmi):
    if bmi < 18.5:
        return "underweight"
    elif 18.5 <= bmi < 24.9:
        return "normal weight"
    elif 25 <= bmi < 29.9:
        return "overweight"
    else:
        return "obese"
def main():
    try:
        weight_kg = float(input("Enter your weight in kilograms: "))
        height_m = float(input("Enter your height in meters: "))

        bmi = calculate_bmi(weight_kg, height_m)
        health_condition = get_health_condition(bmi)

        print(f"Your BMI is {bmi:.2f} ({health_condition}).")
        print("Health advice:")
        if health_condition == "underweight":
            print("Consider gaining weight with a balanced diet.")
        elif health_condition == "normal weight":
            print("Maintain your healthy lifestyle.")
        elif health_condition == "overweight":
            print("Focus on weight management through diet and exercise.")
        else:
            print("Seek professional advice for weight management.")

    except ValueError:
        print("Invalid input. Please enter valid numeric values for weight and height.")

if __name__ == "__main__":
    main()

#3
class SchoolManagementSystem:
    def __init__(self):
        self.student_records = {}

    def add_student(self, student_id, student_name, grades=None):
        if grades is None:
            grades = {}
        self.student_records[student_id] = {'name': student_name, 'grades': grades}

    def update_grades(self, student_id, subject, grade):
        if student_id in self.student_records:
            self.student_records[student_id]['grades'][subject] = grade
        else:
            print(f"Student with ID {student_id} does not exist.")

    def retrieve_student(self, student_id):
        return self.student_records.get(student_id, "Student not found")

    def print_student_report(self, student_id):
        student = self.retrieve_student(student_id)
        if student != "Student not found":
            print(f"Report for {student['name']}:")
            for subject, grade in student['grades'].items():
                print(f"{subject}: {grade}")
        else:
            print(student)
school_system = SchoolManagementSystem()
school_system.add_student(student_id=1, student_name='John Doe', grades={'Math': 85, 'Science': 90})
school_system.add_student(student_id=2, student_name='Jane Smith', grades={'Math': 75, 'History': 80})
school_system.update_grades(student_id=1, subject='Math', grade=95)
print(school_system.retrieve_student(student_id=1))
school_system.print_student_report(student_id=1)
school_system.print_student_report(student_id=2)

#4
def recommend_content(age):
    if age < 13:
        return "Children's content: Animated movies, cartoons, and family-friendly shows."
    elif 13 <= age < 18:
        return "Teen content: Adventure, coming-of-age, and popular series."
    elif 18 <= age < 60:
        return "Adult content: Drama, thriller, comedy, and documentaries."
    else:
        return "Senior content: Classic films, historical shows, and relaxing programs."

def main():
    try:
        age = int(input("Enter your age: "))
        recommendation = recommend_content(age)
        print(f"Recommended content for age {age}: {recommendation}")
    except ValueError:
        print("Invalid input. Please enter a valid age as a whole number.")

if __name__ == "__main__":
    main()

#5
subscriber_ids = [101, 102, 103, 104, 105, 106, 107, 108, 109, 110]
even_subscriber_ids = [id for id in subscriber_ids if id % 2 == 0]
print("Even-numbered subscriber IDs for promotional email campaign:", even_subscriber_ids)

#6
import hashlib
stored_password_hash = "5e884898"

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()
def verify_password(input_password_hash, stored_password_hash):
    return input_password_hash == stored_password_hash
def ask_for_password():
    password = input("Enter the password: ")
    return hash_password(password)
def main():
    while True:
        input_password_hash = ask_for_password()
        if verify_password(input_password_hash, stored_password_hash):
            print("Access granted.")
            break
        else:
            print("Access denied. Please try again.")

if __name__ == "__main__":
    main()

#7
def analyze_customer_satisfaction(survey_data):
    total_score = sum(response['score'] for response in survey_data)
    total_responses = len(survey_data)
    average_score = total_score / total_responses
    if average_score < 3:
        action = 'Investigate issues and improve service quality.'
    elif average_score < 4:
        action = 'Identify areas for minor improvements.'
    else:
        action = 'Maintain high standards and explore excellence awards.'

    return {'average_score': average_score, 'action': action}
survey_responses = [{'score': 5}, {'score': 4}, {'score': 3}, {'score': 5}, {'score': 2}]
results = analyze_customer_satisfaction(survey_responses)

print("Customer Satisfaction Analysis:")
for key, value in results.items():
    print(f"{key}: {value}")

#8
def assess_comment_quality(comment):
    vowels = "aeiouAEIOU"
    vowel_count = sum(1 for char in comment if char in vowels)
    threshold = 3
    return vowel_count >= threshold
comment = "This is a great post!"
if assess_comment_quality(comment):
    print("Comment passed the quality check.")
else:
    print("Comment failed the quality check.")

#9
from datetime import datetime, timedelta

def set_reminder(event_date, days_before, custom_message):
    event_date = datetime.strptime(event_date, "%Y-%m-%d")
    reminder_date = event_date - timedelta(days=days_before)
    return {
        'event_date': event_date.strftime("%Y-%m-%d"),
        'reminder_date': reminder_date.strftime("%Y-%m-%d"),
        'message': custom_message
    }

event = "2002-05-10"
reminder = set_reminder(event, 7, "Happy Birthday Pravalli!")
print(f"Reminder set for {reminder['event_date']}")
print(f"Alert on: {reminder['reminder_date']}")
print(f"Message: {reminder['message']}")

#10
def calculate_loan_repayment(principal, annual_interest_rate, years):
    try:
        monthly_interest_rate = (annual_interest_rate / 100) / 12
        total_payments = years * 12
        monthly_repayment = (principal * monthly_interest_rate) / (1 - (1 + monthly_interest_rate) ** -total_payments)
        return monthly_repayment
    except Exception as e:
        return f"An error occurred: {e}"

def calculate_savings_interest(principal, annual_interest_rate, years):
    try:
        annual_interest_rate = annual_interest_rate / 100
        future_value = principal * ((1 + annual_interest_rate) ** years)
        return future_value
    except Exception as e:
        return f"An error occurred: {e}"

monthly_repayment = calculate_loan_repayment(principal=100000, annual_interest_rate=5, years=15)
print(f"Monthly Loan Repayment: {monthly_repayment:.2f}")

future_savings = calculate_savings_interest(principal=20000, annual_interest_rate=3, years=10)
print(f"Future Value of Savings: {future_savings:.2f}")

#11
def validate_poll_input(question, options):
    if not question or not options:
        return False

    for option in options:
        if not option:
            return False

    return True

poll_question = "What is your favorite color?"
poll_options = ["Red", "Blue", "Green"]

if validate_poll_input(poll_question, poll_options):
    print("Poll input is valid.")
else:
    print("Invalid poll input. Please check your question and options.")

#12
def perform_calculation(operation, *args):
    try:
        if operation == 'add':
            return sum(args)
        elif operation == 'subtract':
            return args[0] - sum(args[1:])
        elif operation == 'multiply':
            result = 1
            for arg in args:
                result *= arg
            return result
        elif operation == 'divide':
            result = args[0]
            for arg in args[1:]:
                if arg == 0:
                    raise ValueError("Cannot divide by zero.")
                result /= arg
            return result
        else:
            raise ValueError("Invalid operation.")
    except Exception as e:
        return f"An error occurred: {e}"
print(perform_calculation('add', 1, 2, 3))
print(perform_calculation('subtract', 10, 2))
print(perform_calculation('multiply', 2, 3, 4))
print(perform_calculation('divide', 20, 5, 2))
print(perform_calculation('divide', 20, 0))

#13
import datetime

def get_server_uptime():
    # Simulate retrieving server uptime (replace with actual logic)
    return 24  # Placeholder for actual uptime retrieval logic

def write_daily_uptime_report():
    uptime_hours = get_server_uptime()
    current_time = datetime.datetime.now()
    formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")
    log_message = f"Server Uptime Report - {formatted_time}: The server has been up for {uptime_hours} hours.\n"

    with open("server_uptime_log.txt", "a") as log_file:
        log_file.write(log_message)

# Call the function to write the daily report
write_daily_uptime_report()

#14